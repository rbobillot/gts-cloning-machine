#!/usr/bin/env python2.7

# A script that acts as the GTS, for sending and receiving pokemon between a
# retail cart and a PC. Credit goes to LordLandon and his sendpkm script, as
# well as the description of the GTS protocol from
# http://projectpokemon.org/wiki/GTS_protocol

from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
from src.http_helper import notify_gts_service
from src.pokehaxlib import initServ
from src.nds_to_gts import nds_to_gts
from src.gts_to_nds import gts_to_nds
from platform import system
from sys import argv, exit
from time import sleep
import os
import json
import thread


if system() == 'Linux':  # or 'Darwin' # (Mac OSX, but sudo doesn't seem to me needed)
    if os.getuid() != 0:
        print('Program must be run as superuser. Enter your password below if prompted.')
        os.system('sudo ' + argv[0] + ' root')
        exit(0)


version="0.3.0"
print("FLAT-PASS, v%s" % version)

initServ()
sleep(1) # let the server take its time to start

### GTS Service API infos ###

GTS_SERVICE_HOST = "localhost"
GTS_SERVICE_PORT = 8081

GTS_SERVICE_BASE_URL = "http://%s:%s" % (GTS_SERVICE_HOST, GTS_SERVICE_PORT)
GTS_SERVICE_NOTIFY_FLATPASS_STATUS_URL = GTS_SERVICE_BASE_URL + "/event/flatpass/status"
GTS_SERVICE_NOTIFY_TRANSFER_STATUS_URL = GTS_SERVICE_BASE_URL + "/event/flatpass/transfer"

### FlapPass API infos ###

API_PORT_NUMBER = 8082

def get_spoof_addr():
    """
    Get the spoofed DNS address, use to connect the NDS to the GTS server
    Either:
     - it comes from the PUBLIC_HOST variable
       (injected here via docker-compose, from the "run" script))
     - it comes from the "spoof_addr.txt" file (created by the dnsspoof function),
       if PUBLIC_HOST is not set (meaning that this script is called outside of docker)
    """
    f = open('spoof_addr.txt', 'r')
    addr = f.read()
    f.close()
    return os.getenv("PUBLIC_HOST", addr)

def get_nds_status(status): # status := "connected" | "not connected"
    platform = 'nds'
    host = 'ip.xx.xx.xx'
    port = 80
    return '{ }'

def get_flatpass_status(status): # status := "running" | "not running"
    platform = 'flatpass'
    host = get_spoof_addr()
    port = API_PORT_NUMBER
    return """{
        "status" : "%s",
        "platform" : "%s",
        "connection_details" : {
            "host" : "%s",
            "port" : "%d"
        }
    }""" % (status, platform, host, port)

def transfer_from_gts_to_nds(self, gen):
    body = self.rfile.read(int(self.headers['Content-Length']))
    pkm_data_b64 = json.loads(body).get('raw_pkm_data')
    pkm = pkm_data_b64.decode('base64')
    gts_service_transfer_event_url = GTS_SERVICE_BASE_URL + "/event/flatpass/transfer"

    thread.start_new_thread(gts_to_nds, (gen, pkm, gts_service_transfer_event_url,))

    return self.sendResponse('{"action": "send"}', 200, 'application/json')

def transfer_from_nds_to_gts(self, gen):
    gts_service_create_pkm_url = GTS_SERVICE_BASE_URL + "/pokemon"
    gts_service_transfer_event_url = GTS_SERVICE_BASE_URL + "/event/flatpass/transfer"
    
    thread.start_new_thread(nds_to_gts, (gen, gts_service_create_pkm_url, gts_service_transfer_event_url,))

    return self.sendResponse('{"action": "receive"}', 200, 'application/json')

### ROUTING ###

class handleRoutes(BaseHTTPRequestHandler):
    def do_GET(self):
        if (self.path == '/'):
            return self.sendResponse('{"status": "ok"}', 200, 'application/json')
        elif (self.path.startswith('/status')):
            if (self.path.endswith('/flatpass')):
                return self.sendResponse(get_flatpass_status("running"), 200, 'application/json')
            elif (self.path.endswith('/nds')):
                raise self.sendResponse("Not implemented yet.", 501, 'text/plain')
        else:
            return self.sendResponse('Not found.', 404, 'text/plain')

    def do_POST(self):
        if (self.path.startswith('/transfer/gen-')):
            gen = self.path.split('/')[2].split('-')[1]
            if gen not in ['4', '5']:
                return self.sendResponse('Gen %s not handled' % gen, 404, 'text/plain')
            if (self.path.endswith('/gts-nds')):
                return transfer_from_gts_to_nds(self, int(gen))
            elif (self.path.endswith('/nds-gts')):
                return transfer_from_nds_to_gts(self, int(gen))
        else:
            return self.sendResponse('Not found.', 404, 'text/plain')

    def sendResponse(self, res, status, type):
        self.send_response(status)
        self.send_header('Content-type', type)
        self.end_headers()
        # Send the html message
        self.wfile.write(res)
        return

try:
    # Create a web server and define the handler to manage the incoming requests
    server = HTTPServer(('', API_PORT_NUMBER), handleRoutes)
    print('Started http server on port %d' % API_PORT_NUMBER)
    try:
        notify_gts_service("flatpass status", get_flatpass_status("running"), GTS_SERVICE_NOTIFY_FLATPASS_STATUS_URL)
    except Exception as e:
        print('Failed to notify GTS service about flatpass status: %s' % e)
        print('gts-service might be down, or the connection might be lost.')
    # Wait forever for incoming http requests
    server.serve_forever()

except KeyboardInterrupt:
    print('\nServer ended via Keyboard Interrupt.')
    try:
        flatpass_status = get_flatpass_status("not running")
        transfer_status = """{
            "status" : "error",
            "transfer_platform": "none",
            "details": "Pokemon was not transferred because the transfer was interrupted."
        }"""

        notify_gts_service("flatpass status", flatpass_status, GTS_SERVICE_NOTIFY_FLATPASS_STATUS_URL)
        notify_gts_service("transfer status", transfer_status, GTS_SERVICE_NOTIFY_TRANSFER_STATUS_URL)
    except Exception as e:
        print('Failed to notify GTS service about flatpass status: %s' % e)
        print('gts-service might be down, or the connection might be lost.')
    server.socket.close()
    exit(0)
